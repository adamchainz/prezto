#
# Executes commands at the start of an interactive session.
#

if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

alias take=mkdcd

zstyle ':prezto:module:editor:info:completing' format ''

# History
export HISTIGNORE="&:ls:[bf]g:exit"
export HISTSIZE=40000
export HISTFILESIZE=1000000
unsetopt correct_all
unsetopt share_history  # between-terminal sharing - kinda annoying.
setopt extended_history
setopt histignorespace
setopt interactivecomments

# ZSH Options
autoload zmv
setopt extended_glob
unset MAILCHECK

# Remove dot from wordchars so that we can skip it.
export WORDCHARS="*?_[]~&;\!#%^(){}<>"

# The ultimate history mode
up-line-or-search-prefix () {
  local CURSOR_before_search=$CURSOR
  zle up-line-or-search "$LBUFFER"
  CURSOR=$CURSOR_before_search
}
zle -N up-line-or-search-prefix
bindkey "^[OA" 'up-line-or-search-prefix'

down-line-or-search-prefix () {
  local CURSOR_before_search=$CURSOR
  zle down-line-or-search "$LBUFFER"
  CURSOR=$CURSOR_before_search
}
zle -N down-line-or-search-prefix
bindkey "^[OB" 'down-line-or-search-prefix'

# Add in brew autocompletions
[[ -s /usr/local/share/zsh-completions ]] && fpath=(/usr/local/share/zsh-completions $fpath)
compinit -u

# AWS
[[ $PROMPT =~ '>' ]] || export PROMPT="> \${AWS_PROFILE:-default} $PROMPT"
[[ -s /usr/local/bin/aws_zsh_completer.sh ]] && source /usr/local/bin/aws_zsh_completer.sh

#   ___  ____
#  / _ \/ ___|
# | | | \___ \
# | |_| |___) |
#  \___/|____/
#

# Customize to your needs...
export PATH=~/script:~/bin
export PATH=$PATH:/usr/local/share/npm/bin:/usr/local/mysql/bin:/Applications/Inkscape.app/Contents/Resources/bin
export PATH=$PATH:~/.cargo/bin
export PATH=$PATH:/usr/local/heroku/bin:/usr/local/opt/ruby/bin:/usr/local/opt/gems/bin
export PATH=$PATH:/Library/TeX/texbin/
export PATH=$PATH:/Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/bin
export PATH=$PATH:/usr/X11/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/local/libexec/gnubin
export PATH=$PATH:/usr/local/opt/gettext/bin:/opt/local/bin:/opt/local/sbin
export PATH=$PATH:/usr/local/opt/go/libexec/bin:~/go/bin

# Increase file-watchable number
ulimit -n 4096

# Fix these errors when running parallel tests with Python multiprocessing
# objc[67570]: +[__NSPlaceholderDate initialize] may have been in progress in another thread when fork() was called.
# objc[67570]: +[__NSPlaceholderDate initialize] may have been in progress in another thread when fork() was called. We cannot safely call it or ignore it in the fork() child process. Crashing instead. Set a breakpoint on objc_initializeAfterForkError to debug.
# https://stackoverflow.com/questions/50168647/multiprocessing-causes-python-to-crash-and-gives-an-error-may-have-been-in-progr
export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

function pfd() {
  osascript 2>/dev/null <<EOF
    tell application "Finder"
      return POSIX path of (target of window 1 as alias)
    end tell
EOF
}

function pfs() {
  osascript 2>/dev/null <<EOF
    set output to ""
    tell application "Finder" to set the_selection to selection
    set item_count to count the_selection
    repeat with item_index from 1 to count the_selection
      if item_index is less than item_count then set the_delimiter to "\n"
      if item_index is item_count then set the_delimiter to ""
      set output to output & ((item item_index of the_selection as alias)'s POSIX path) & the_delimiter
    end repeat
EOF
}

function cdf() {
  cd "$(pfd)" || exit 1
}

function pushdf() {
  pushd "$(pfd)"
}

function trash() {
  local trash_dir="${HOME}/.Trash"
  local temp_ifs=$IFS
  IFS=$'\n'
  for item in "$@"; do
    if [[ -e "$item" ]]; then
      item_name="$(basename $item)"
      if [[ -e "${trash_dir}/${item_name}" ]]; then
        mv -f "$item" "${trash_dir}/${item_name} $(date "+%H-%M-%S")"
      else
        mv -f "$item" "${trash_dir}/"
      fi
    fi
  done
  IFS=$temp_ifs
}

#     _    _ _
#    / \  | (_) __ _ ___  ___  ___
#   / _ \ | | |/ _` / __|/ _ \/ __|
#  / ___ \| | | (_| \__ \  __/\__ \
# /_/   \_\_|_|\__,_|___/\___||___/
#

# some more ls aliases

alias lsa='ls -al'
alias lsl='ls -1'
alias lsh='ls -alh'

# Protecting against rm!
alias rrm='/bin/rm -i'
alias rm='trash'
alias srm='srm -r --dod'

alias c=cd

# GIT Aliases

unalias gm 2>/dev/null # interferes with graphicsmagick

alias g='git'
compdef g=git

alias gbD='git branch -D'
compdef _git gs=git-branch

alias gs="git status -s -b"
compdef _git gs=git-status
alias gsl="git status | less -R"
compdef _git gsl=git-status

alias gcom="g checkout master"
compdef _git gcom=git-checkout

alias gcm="g commit -m"
compdef _git gcm=git-commit

alias gd="git diff"
compdef _git gd=git-diff
alias gdc="git diff --cached"
compdef _git gdc=git-diff

alias gl="git log --stat"
compdef _git gl=git-log


# Git log full diff with no context
alias gld0="gld -U0"
compdef _git gld0=git-log

# Git log patch with no context = diffs on one file only
alias glp='git log --topo-order --stat --patch -U0 --pretty=format:${_git_log_medium_format} --follow'

alias pull="g pull"
alias pulp="g pull --prune"
alias push="g push"
alias pushup='git push -u origin $(git rev-parse --abbrev-ref HEAD)'

alias gaa="g add --all && git status"
alias gap="g add -p"

alias grim="git rebase --interactive master"

unalias gdm 2>/dev/null # interferes with go dependency manager

# 'hub' aliases
alias hpr='hub pull-request -o'

# arcanist aliases
alias ad='arc diff'
alias al='arc land'
alias ali='arc lint'

# Other app aliases
alias optimize_jpegs="find . -iname \"*.jpg\" -exec jpegoptim --strip-all {} \;"
alias ql="quick-look" # preview a file using QuickLook
alias chrome="/usr/bin/open -a \"/Applications/Google Chrome.app\""

# Lifelogger aliases
alias l=lifelogger
alias q="lifelogger quickadd"

# Utilities
alias bc="bc -l"
function calc {
  [[ -n "$1" ]] && echo "$1" | bc
}

# Mac aliases
alias finder_show_hidden="defaults write com.apple.finder AppleShowAllFiles TRUE && killall Finder"
alias finder_hide_hidden="defaults write com.apple.finder AppleShowAllFiles FALSE && killall Finder"

# nvm as per `brew info nvm`

export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion" ] && . "/usr/local/opt/nvm/etc/bash_completion"  # This loads nvm bash_completion

# Python

if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

alias pip='python -m pip'
unalias py >/dev/null 2>&1 || true

# For virtualenvs
unfunction chpwd >/dev/null 2>&1 || true  # Is reset in a few lines - virtualenvwrapper does a few `cd`s
pyenv which virtualenvwrapper.sh >/dev/null && source "$(pyenv which virtualenvwrapper.sh)"
export VIRTUAL_ENV_DISABLE_PROMPT=1  # ZSH theme already reports virtualenv

pyclean () {
    find . -type f -name "*.py[co]" -delete
    find . -type d -name "__pycache__" -delete
}

# Ansible
export ANSIBLE_NOCOWS=1

# MySQL
export MYSQL_PS1="\u@\h [\c]> "

# Brew
if command -v brew 1>/dev/null; then
  brew_prefix=$(brew --prefix)
else
  brew_prefix=''
fi

# Ruby
if command -v rbenv 1>/dev/null; then
  eval "$(rbenv init -)"
elif [ -n "$brew_prefix" ]; then
  export GEM_HOME="$brew_prefix/opt/gems"
  export GEM_PATH="$brew_prefix/opt/gems"
fi

# Autojump (load at end to only listen to user's cd commands)
if [ -n "$brew_prefix" ]; then
  [[ -s $brew_prefix/etc/autojump.sh ]] && . $brew_prefix/etc/autojump.sh
fi

# List directory contents after a 'cd'
function chpwd() {
    emulate -LR zsh
    ls
}

[[ -s ~/bin/arcanist ]] && source ~/bin/arcanist/resources/shell/bash-completion

# Ex-oh-my-zsh plugins
alias st=subl

# Extra secrets for this computer
if [[ -s ~/.zsecret ]]; then
  source ~/.zsecret
fi
